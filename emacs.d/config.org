* Package Config

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)
#+END_SRC

* Default

** global

#+BEGIN_SRC emacs-lisp
  ;; This will sync the shell PATH with emacs PATH
  (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize))

  ;; Prevent text wrap by default
  (setq-default truncate-lines t)

  ;; enable y/n answers
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; If there is a config.org, load it as a start-page
  ( let*
      ((c ".emacs.d/config.org"))
      (if (file-exists-p c)
      (setq initial-buffer-choice c)
      (nil))
    )
  (setq initial-buffer-choice "~/.emacs.d/config.org")
  (setq-default indent-tabs-mode nil
              tab-width 2)
  (setq ring-bell-function 'ignore)
#+END_SRC

** backup
  #+BEGIN_SRC emacs-lisp
  (setq
  make-backup-files t
  version-control t   ; use numbers for backup files
  kept-new-versions 10
  kept-old-versions 0
  delete-old-versions t
  backup-by-copying t
  vc-make-backup-files t
  auto-save-default nil
  backup-directory-alist '(("." . "~/.emacs.d/backup")))
  #+END_SRC

** disable lockfiles
   These are the Files creating in the current Directory for files that have not been saved yet #File#

   #+BEGIN_SRC emacs-lisp
  (setq create-lockfiles nil)
   #+END_SRC


* Org
** org settings

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

** org indent mode

#+BEGIN_SRC emacs-lisp
(org-indent-mode 1)
#+END_SRC

* GUI

** disable menubar
  #+BEGIN_SRC emacs-lisp
    (scroll-bar-mode 0)
    (tool-bar-mode -1)     ; disable the tool-bar
    (menu-bar-mode -1)     ; disable the menu-bar
    (global-linum-mode -1)  ; dont show line-numbers everywhere
    (show-paren-mode)
    (electric-pair-mode 1)
    (setq-default show-trailing-whitespace t)
  #+END_SRC

** themes

#+BEGIN_SRC emacs-lisp
(use-package hamburg-theme
  :ensure t
  :config
    (load-theme 'hamburg t)
    (set-face-background 'linum "#27282d")
    (set-cursor-color "#ff69b4")
    (set-background-color "#000000")
    (blink-cursor-mode 0))
#+END_SRC


** line numbers

#+BEGIN_SRC emacs-lisp
  (use-package nlinum
    :ensure t
    :init
    (progn
      (setq-default nlinum-format "%3d ")
      ))
  (custom-set-variables '(linum-format (quote "%4d")))
  (global-linum-mode 1)
#+END_SRC

* rainbow-delimiters

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config

    (add-hook 'emacs-lisp-hook #'rainbow-delimiters-mode))
#+END_SRC

* ivy

#+BEGIN_SRC emacs-lisp
(use-package ivy
    :ensure t
    :config
    ;; regex order
    (setq ivy-re-builders-alist '((t . ivy--regex-ignore-order)))

    (define-key ivy-mode-map [escape] 'minibuffer-keyboard-quit)
    (ivy-mode t))

  (use-package counsel
    :ensure t
    :config)

  (use-package swiper
    :ensure t
    :config
    (ivy-mode t))

  (use-package avy
    :ensure t
    :config

    (defun avy-line-saving-column ()
      (interactive)
      (let ((col (current-column)))
        (avy-goto-line)
        (move-to-column col)))
)
#+END_SRC

* Evil
** initialize

#+BEGIN_SRC emacs-lisp
  (setq evil-want-C-u-scroll t)
  (use-package evil
    :ensure t
    :init
    (setq-default evil-search-module 'evil-search
                  evil-shift-width 2
                  ;; prevent esc-key from translating to meta-key in terminal mode
                  evil-esc-delay 0
                  evil-want-Y-yank-to-eol t)
    (evil-mode t)
    :config)
#+END_SRC

** evil-surround
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode))
#+END_SRC

** evil-matchit

#+BEGIN_SRC emacs-lisp
  (use-package evil-matchit
    :ensure t
    :config
    (global-evil-matchit-mode 1))
#+END_SRC

** evil-nerd-commenter
#+BEGIN_SRC emacs-lisp
  (use-package evil-nerd-commenter
    :ensure t)

#+END_SRC

* projectile

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :demand t
    :bind (("C-c f" . projectile-find-file))
    :config
    (projectile-global-mode)
    (setq projectile-enable-caching t)
    ;;(setq projectile-completion-system 'grizzl)
    (setq projectile-completion-system 'ivy)
    ;;(setq projectile-switch-project-action 'neotree-projectile-action)
)
#+END_SRC

* f (file util)
#+BEGIN_SRC emacs-lisp
  (use-package f
    :ensure t
    :demand t)
#+END_SRC

* flycheck

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init
  (setq flycheck-indication-mode 'left-fringe)
  :config
  (global-flycheck-mode)
  (define-fringe-bitmap 'flycheck-fringe-bitmap-double-arrow
    [0 0 0 0 0 4 12 28 60 124 252 124 60 28 12 4 0 0 0 0])
  )
#+END_SRC

* Yasnippet

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    ;(define-key yas-minor-mode-map [tab] nil)
    ;(define-key yas-minor-mode-map (kbd "TAB") nil)

    ;(define-key yas-keymap [tab] 'my-funcs/tab-complete-or-next-field)
    ;(define-key yas-keymap (kbd "TAB") 'my-funcs/tab-complete-or-next-field)
    ;(define-key yas-keymap [(control tab)] 'yas-next-field)
    ;(define-key yas-keymap (kbd "C-g") 'my-funcs/abort-company-or-yas)

    (setq yas/root-directory (list (concat init-dir "snippets")))
    (yas-global-mode 1))
#+End_SRC

* company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0.2
    company-minimum-prefix-length 2)
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (define-key company-active-map (kbd "C-w") #'backward-kill-word)
    ;(define-key company-active-map [tab] 'my-funcs/expand-snippet-or-complete-selection)
    ;(define-key company-active-map (kbd "TAB") 'my-funcs/expand-snippet-or-complete-selection)
    (nconc company-backends '(company-yasnippet))
    (global-company-mode))

  (load-file "~/.emacs.d/company-flow.el")
  (eval-after-load 'company
    '(add-to-list 'company-backends 'company-flow))

#+END_SRC

* which-key

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC

* git
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (use-package evil-magit
      :ensure t)
    ;; full screen magit-status
    (defadvice magit-status (around magit-fullscreen activate)
      (window-configuration-to-register :magit-fullscreen)
      ad-do-it
      (delete-other-windows))

    (defun magit-quit-session ()
      "Restores the previous window configuration and kills the magit buffer"
      (interactive)
      (kill-buffer)
      (jump-to-register :magit-fullscreen))

    (global-set-key (kbd "C-x g") 'magit-status))
#+END_SRC

* Default-Text-Scale
#+BEGIN_SRC emacs-lisp
  (use-package default-text-scale :ensure t)
  (global-set-key (kbd "C-M-=") 'default-text-scale-increase)
  (global-set-key (kbd "C-M--") 'default-text-scale-decrease)
#+END_SRC

* Compile-Mode

#+BEGIN_SRC emacs-lisp
(require 'ansi-color)
(defun colorize-compilation-buffer ()
  (toggle-read-only)
  (ansi-color-apply-on-region compilation-filter-start (point))
  (toggle-read-only))
(add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
#+END_SRC


* Language Support

** Markdown

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+END_SRC

** JavaScript

JS mode configuration:

#+BEGIN_SRC emacs-lisp
  ;;(load-file "~/.emacs.d/emacs-flow-jsx-mode.el")
  (load-file "~/.emacs.d/flow.el")
  (load-file "~/.emacs.d/prettier-js.el")
#+END_SRC

Adds flychecker support for JS + Flow:

#+BEGIN_SRC emacs-lisp
  (require 'prettier-js)
  (require 'f)
  (require 'json)
  (require 'flycheck)

  (defun flycheck-parse-flow (output checker buffer)
    (let ((json-array-type 'list))
      (let ((o (json-read-from-string output)))
        (mapcar #'(lambda (errp)
                    (let ((err (cadr (assoc 'message errp))))
                      (flycheck-error-new
                      :line (cdr (assoc 'line err))
                      :column (cdr (assoc 'start err))
                      :level 'error
                      :message (cdr (assoc 'descr err))
                      :filename (f-relative
                                  (cdr (assoc 'path err))
                                  (f-dirname (file-truename
                                              (buffer-file-name))))
                      :buffer buffer
                      :checker checker)))
                (cdr (assoc 'errors o))))))

  (flycheck-define-checker javascript-flow
    "Javascript type checking using Flow."
    :command ("flow" "--json" source-original)
    :error-parser flycheck-parse-flow
    :modes 'js2-mode
    )
  (add-to-list 'flycheck-checkers 'javascript-flow)
#+END_SRC

** ReasonML

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path ".emacs.d/reason-mode")

  (defun chomp-end (str)
    "Chomp tailing whitespace from STR."
    (replace-regexp-in-string (rx (* (any " \t\n")) eos)
                              ""
                              str))

  (let ((support-base-dir (concat (replace-regexp-in-string "refmt" "" (file-truename (chomp-end (shell-command-to-string "which refmt")))) ".."))
        (merlin-base-dir (concat (replace-regexp-in-string "ocamlmerlin" "" (file-truename (chomp-end (shell-command-to-string "which ocamlmerlin")))) "..")))
    ;; Add npm merlin.el to the emacs load path and tell emacs where to find ocamlmerlin
    (add-to-list 'load-path (concat merlin-base-dir "/share/emacs/site-lisp/"))
    (setq merlin-command (concat merlin-base-dir "/bin/ocamlmerlin"))

    ;; Add npm reason-mode to the emacs load path and tell emacs where to find refmt
    (add-to-list 'load-path (concat support-base-dir "/share/emacs/site-lisp"))
    (setq refmt-command (concat support-base-dir "/bin/refmt")))

  (require 'reason-mode)
  (require 'merlin)
  (add-hook 'reason-mode-hook (lambda ()
                                ;; (add-hook 'before-save-hook 'refmt-before-save)
                                (merlin-mode)))


  (setq merlin-ac-setup t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :ensure t
  :config
  ;; do not show errors (use flycheck for that)
  (js2-mode-hide-warnings-and-errors)

  (setq
   js2-skip-preprocessor-directives nil   ; allow shebangs in js-files (for node)

   ;; default values for indentation (possibly overwritten by editorconfig)
   js2-basic-offset 2
   js-indent-level 2
   js-expr-indent-offset -2)

  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
  (add-to-list 'auto-mode-alist '("\\.jsx\\'" . js2-jsx-mode))
  (add-to-list 'interpreter-mode-alist '("node" . js2-mode)))

#+END_SRC

** Golang

#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :ensure t
    :mode (("\\.go\\'" . go-mode)))
#+END_SRC
** PHP

#+BEGIN_SRC emacs-lisp
  (use-package php-mode
    :ensure t
    :mode "\\.php[345]?\\'")
#+END_SRC

** Yaml
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
    :ensure t
    :mode "\\.y[a]?ml\\'")
#+END_SRC

* Custom Functions

#+BEGIN_SRC emacs-lisp
  (defun my-funcs/open-snippet-dir ()
    "Opens snippet dir for current mode."
    (interactive)
    (let* ((dir (file-name-as-directory (car yas-snippet-dirs)))
           (path (concat dir (symbol-name major-mode))))
      (dired path)))
#+END_SRC

* General (keybindings)

#+BEGIN_SRC emacs-lisp
  (use-package general
    :ensure t
    :config
    (general-evil-setup)
    ;; bind a key globally in normal state; keymaps must be quoted
    (setq general-default-keymaps 'evil-normal-state-map))

  (setq my-comma-leader ",")
  (setq my-backslash-leader "\\")

  ;; Reason related bindings
  (general-define-key :keymaps 'reason-mode-map
                      :states '(normal)
                      :prefix my-comma-leader
                      "r" 'refmt
                      "t" 'merlin-type-enclosing
                      "u" 'merlin-type-enclosing-go-up
                      "d" 'merlin-type-enclosing-go-down)

  ;; JS related bindings
  (general-define-key :keymaps '(js2-mode-map javascript-mode)
                      :states '(normal)
                      :prefix my-comma-leader
                      "r" 'prettier-js
                      "t" 'flow-type-at-pos
                      "s" 'flow-status
                      "e" 'my/npm-test)



  ;; Comment related bindings
  (general-define-key :prefix my-backslash-leader
                      :keymaps '(normal visual)
                      "ci" 'evilnc-comment-or-uncomment-lines
                      "cl" 'evilnc-quick-comment-or-uncomment-to-the-line
                      "ll" 'evilnc-quick-comment-or-uncomment-to-the-line
                      "cc" 'evilnc-copy-and-comment-lines
                      "cp" 'evilnc-comment-or-uncomment-paragraphs
                      "cr" 'comment-or-uncomment-region
                      "cv" 'evilnc-toggle-invert-comment-line-by-line
                      "."  'evilnc-copy-and-comment-operator)

  ;; General Emacs bindings without any map / leader
  (general-define-key
   "M-;" 'evilnc-comment-or-uncomment-lines)
   ;; "C-c l" 'evilnc-quick-comment-or-uncomment-to-the-line
   ;; "C-c c" 'evilnc-copy-and-comment-lines
   ;; "C-c p" 'evilnc-comment-or-uncomment-paragraphs)
#+END_SRC
